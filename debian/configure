#!/bin/bash
#                                                         -*-shell-script-*-
# Placed into the public domain by John Morris, 2014
#
# Configure source package dependencies

cd "$(dirname $0)"

FLAVORS=

# Check if xenomai is installed, headers is not needed
check_xeno() {
    XENO_KVER="$(dpkg-query -W -f '${binary:Package}\n' linux-image-\*xenom\* 2> /dev/null)"
}

#FIXME: testing needed
# Check if rtai is installed
check_rtai() {
    RTAI_KVER="$(dpkg-query -W -f '${binary:Package}\n' linux-headers-\*rtai\* 2> /dev/null)"
}

# Don't build rt-preempt on non x86 platforms
check_rt() {
    local ARCH="amd64 i386"
    local TMP="$(dpkg-architecture -qDEB_HOST_ARCH)"

    [[ $ARCH =~ $TMP ]]
}

# Calculate the distrao-specific list of Build-Depends:
BUILD_DEPS=

get_build_deps() {

    # add docs
    if test "$1" != "--disable-docs"; then
        BUILD_DEPS="$BUILD_DEPS asciidoc (>= 8.5), dblatex (>= 0.2.12),"
	BUILD_DEPS="$BUILD_DEPS ghostscript, imagemagick, source-highlight,"
    fi
    
    # add Xenomai deps, if found
    if check_xeno; then
	BUILD_DEPS="$BUILD_DEPS libxenomai-dev,"
	FLAVORS+=" xenomai"
    fi

#FIXME: testing needed
    # add RTAI deps, if found
    if check_rtai; then
	# select the first element
	set -- $RTAI_KVER
        BUILD_DEPS="$BUILD_DEPS librtai-dev, $1,"
	FLAVORS+=" rtai-kernel"
    fi

    # rt-preempt
    if check_rt; then
	FLAVORS+=" rt-preempt"
    fi

    # add extra space
    BUILD_DEPS="$BUILD_DEPS "
}


# Create the base control file from the control.default template, then
# add rtpreempt-kernel, rtai-kernel or xenomai flavor pkgs as appropriate
build_control() {
    # calculate build deps for template
    get_build_deps $1
    echo "Adding build deps to control file:  $BUILD_DEPS"

    # copy base template into place, filling in build deps
    sed "s/@BUILD_DEPS@/$BUILD_DEPS/" < control.in > control

    # add xenomai threads, if appropriate
    if check_xeno; then
	echo "Configuring to build xenomai (userland) threads"
	cat control.xenomai.in >> control
    fi

    if check_rtai; then
	echo "Configuring to build rtai (kernel) threads"
	cat control.rtai-kernel.in >> control
    fi

    # rt-preempt
    if check_rt; then
	echo "Configuring to build rt-preempt (kernel) threads"
	cat control.rtpreempt-kernel.in >> control
    fi

    # Build documentation
    if test "$1" != "--disable-docs"; then
        cat control.docs.in >> control
    fi
}

build_rules() {
    local TMP=

    for FLAVOR in $FLAVORS; do
        TMP+="s/--without-$FLAVOR /--with-$FLAVOR /g; "
    done

    if test "$1" = "--disable-docs"; then
        TMP+="s/--enable-build-documentation=pdf/--disable-build-documentation/g; "
        TMP+="s/BUILDDOCS=1/BUILDDOCS=/g; "
    fi

    sed -e "$TMP" < rules.in > rules
    chmod +x rules
}

# Add to file of substitution variables used in binary control files.
# The ones not needed for the Source: package are best added to
# debian/rules.
build_substvars() {
    # init empty substvars file
    >substvars

    # add Xenomai deps, if found
    if check_xeno; then
	set -- $XENO_KVER
	XENO_KVER="${1//linux-image-/}"
	test -z "$XENO_KVER" || \
	    echo "xenomai-kver=$XENO_KVER" >> substvars
    fi

    if check_rtai; then
	set -- $RTAI_KVER
	RTAI_KVER="${1//linux-image-/}"
	test -z "$RTAI_KVER" || \
	    echo "rtai-kver=$RTAI_KVER" >> substvars
    fi
}


if test "$1" = "substvars"; then
    # Build the debian/substvars file
    build_substvars
else
    # Build the debian/control file
    build_control $1
    build_rules $1

    # delete old files
    rm -f linuxcnc-{doc*,rtai,rtpreempt,xenomai}.files

    # rename rt-preempt
    FLAVORS=${FLAVORS/rt-preempt/rtpreempt}

    for FLAVOR in $FLAVORS; do
        cp linuxcnc-$FLAVOR.files.in linuxcnc-$FLAVOR.files
    done
    
    # Build documentation
    if test "$1" != "--disable-docs"; then
        cp linuxcnc-doc-en.files.in linuxcnc-doc-en.files
        cp linuxcnc-doc-es.files.in linuxcnc-doc-es.files
        cp linuxcnc-doc-fr.files.in linuxcnc-doc-fr.files
    fi
fi

